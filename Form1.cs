using System.Diagnostics;

namespace CorrectEssayV2;

public partial class Form1 : Form
{
    private readonly OCRHelper OCRHelper;
    private readonly ChatGPTHelper ChatGPTHelper;

    private const string EssayRequirementFileName = "requirement";

    public Form1()
    {
        InitializeComponent();
        OCRHelper = new OCRHelper();
        ChatGPTHelper = new ChatGPTHelper();
    }

    private void pathBtn_Click(object sender, EventArgs e)
    {
        var folderBrowserDialog = new FolderBrowserDialog
        {
            Description = "请选择文件夹"
        };

        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
        {
            pathTextBox.Text = folderBrowserDialog.SelectedPath;
        }
    }

    private async void startBtn_Click(object sender, EventArgs e)
    {
        var fileDirectory = pathTextBox.Text.Trim();
        if (string.IsNullOrWhiteSpace(fileDirectory))
        {
            MessageBox.Show("请选择要上传的学生作文照片所在的班级文件夹");
            return;
        }

        var button = (Button)sender;
        button.Enabled = false;

        var subDirs = Directory.GetDirectories(fileDirectory);
        if (!subDirs.Any())
        {
            MessageBox.Show("请选择正确的文件夹");
            button.Enabled = true;
            return;
        }

        var files = Directory.GetFiles(fileDirectory);
        if (files.Any(x => x.Contains(EssayRequirementFileName)))
        {
            var requirement = await OCRHelper.ImageToText(files.First(x => x.Contains(EssayRequirementFileName)));
            if (requirement != null)
            {
                ChatGPTHelper.EssayRequirement = requirement;
            }
        }

        var progressBar = AddProgressBar(subDirs.Length);

        foreach (var subDir in subDirs)
        {
            //var (parseResult, processResult, timeCost) = await GetComment(subDir);
            //if (!string.IsNullOrEmpty(parseResult))
            //{
            //    CreateCommentFile(subDir, parseResult, processResult, timeCost);
            //}
            Thread.Sleep(1000);
            progressBar.PerformStep();
        }

        MessageBox.Show("处理完成啦 (●′ω`●) \n快打开文件夹里的Comment.txt文件寻找评语吧（⺻▽⺻ ）");
        button.Enabled = true;
        Application.Exit();
    }

    /// <summary>
    /// add progress bar to controls
    /// </summary>
    /// <param name="length"></param>
    /// <returns>the progress bar</returns>
    private ProgressBar AddProgressBar(int length)
    {
        var progressBar = new ProgressBar
        {
            Minimum = 0,
            Maximum = length,
            Step = 1,
            Size = new Size(this.Size.Width, 10),
            Dock = DockStyle.Bottom,
        };

        this.Controls.Add(progressBar);

        //TODO : display detail when progress bar is in progress.

        return progressBar;
    }

    /// <summary>
    /// create a comment file for the content of subdir which contains parse result, process result and time cost.
    /// </summary>
    /// <param name="subDir"></param>
    /// <param name="parseResult"></param>
    /// <param name="processResult"></param>
    /// <param name="timeCost"></param>
    private void CreateCommentFile(string subDir, string parseResult, string processResult, long timeCost)
    {
        var filePath = Path.Combine(subDir, "Comment.txt");

        using (var fs = new FileStream(filePath, FileMode.Create))
        using (var writer = new StreamWriter(fs))
        {
            writer.WriteLine($"本次处理时间为{timeCost}秒");
            writer.WriteLine($"本次文本识别的结果是{parseResult}");
            writer.WriteLine($"本次作文批改的结果是{processResult}");
        }

        // 保存文件
        var fileStream = new FileStream(filePath, FileMode.OpenOrCreate, FileAccess.ReadWrite);
        fileStream.Flush();
        fileStream.Close();
    }

    /// <summary>
    /// convert images contained in subdir to text using ocr, and send the text to chatgpt to get comments.
    /// </summary>
    /// <param name="subDir"></param>
    /// <returns>(ocr parse result, comments generated by chatgpt, total time cost)</returns>
    private async Task<(string, string, long)> GetComment(string subDir)
    {
        var sw = new Stopwatch();

        sw.Start();

        //Convert image to text
        var results = await OCRHelper.DirectoryToText(subDir);
        if (!results.Any())
        {
            return (string.Empty, string.Empty, 0);
        }

        var parseResult = string.Join(string.Empty, results);

        // Send text to chatGPT
        var processResult = await ChatGPTHelper.Chat(parseResult);

        sw.Stop();

        return (parseResult, processResult, sw.ElapsedMilliseconds / 1000);
    }

    private void pathTextBox_DoubleClick(object sender, EventArgs e)
    {
        pathBtn_Click(sender, e);
    }
}